---
interface ShowcaseItem {
  title: string;
  image: string;
  description: string; // 悬停时显示的简短描述
  details?: string; // 点击后模态窗口显示的详细描述
  link?: string; // 可选的外部链接
}

interface Props {
  title?: string;
  items: ShowcaseItem[];
}

const { title, items } = Astro.props;
---

<div class="showcase-container my-8">
  {title && (
    <h2 class="text-2xl md:text-3xl font-bold text-90 mb-6">{title}</h2>
  )}
  
  <div class="showcase-grid grid grid-cols-2 md:grid-cols-3 gap-3 md:gap-6">
    {items.map((item, index) => (
      <div class="showcase-item overflow-hidden rounded-lg shadow-sm hover:shadow-lg transition-all duration-300">
        <!-- 图片区域 - 完全铺满 -->
        <div class="showcase-image-wrapper relative overflow-hidden cursor-pointer group bg-gray-100" data-showcase-index={index}>
          <div class="w-full aspect-[4/3]">
            <img 
              src={item.image} 
              alt={item.title}
              class="w-full h-full object-cover block transition-transform duration-500 group-hover:scale-110"
            />
          </div>
          
          <!-- 悬停遮罩 - 显示简短描述 -->
          <div class="absolute inset-0 bg-black/70 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center p-6">
            <p class="text-white text-center text-sm md:text-base leading-relaxed">
              {item.description}
            </p>
          </div>
        </div>
        
        <!-- 标题在图片下方 -->
        <div class="bg-[var(--card-bg)] px-4 py-3">
          <h3 class="text-base md:text-lg font-bold text-90 text-center line-clamp-2">
            {item.title}
          </h3>
        </div>
      </div>
    ))}
  </div>
</div>

<!-- 模态窗口 - 覆盖整个页面 -->
<div id="showcase-modal" class="showcase-modal hidden">
  <div class="modal-backdrop" id="modal-backdrop"></div>
  <div class="modal-wrapper">
    <div class="modal-content">
      <button class="modal-close" id="modal-close" aria-label="关闭">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      
      <!-- 图片和内容合并区域 -->
      <div class="modal-image-content-wrapper">
        <!-- 背景图片 -->
        <img id="modal-image" src="" alt="" class="modal-image" />
        
        <!-- 渐变遮罩 - 让下半部分变暗以便显示文字 -->
        <div class="modal-overlay"></div>
        
        <!-- 文字内容 - 叠加在图片下半部分 -->
        <div class="modal-text-overlay">
          <h2 id="modal-title" class="modal-title"></h2>
          <div id="modal-description" class="modal-description"></div>
        </div>
        
        <!-- Visit Link 按钮 - 左下角 -->
        <a id="modal-link" href="#" target="_blank" rel="noopener noreferrer" class="modal-link-btn hidden">
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
            <polyline points="15 3 21 3 21 9"></polyline>
            <line x1="10" y1="14" x2="21" y2="3"></line>
          </svg>
          <span>Visit Link</span>
        </a>
      </div>
    </div>
  </div>
</div>

<style>
  /* 图片完全铺满 */
  .showcase-image-wrapper {
    display: block;
    margin: 0;
    padding: 0;
    line-height: 0;
  }
  
  .showcase-image-wrapper img {
    user-select: none;
    margin: 0;
    padding: 0;
    vertical-align: middle;
  }
  
  /* 模态窗口 - 覆盖整个视口 */
  .showcase-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 99999;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .showcase-modal.hidden {
    display: none;
  }
  
  /* 背景遮罩 */
  .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(8px);
    animation: fadeIn 0.2s ease-out;
  }
  
  /* 模态窗口容器 */
  .modal-wrapper {
    position: relative;
    z-index: 100000;
    width: 100%;
    max-width: 800px;
    max-height: 90vh;
    margin: 0 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: scaleIn 0.3s ease-out;
  }
  
  /* 模态窗口内容 */
  .modal-content {
    position: relative;
    width: 100%;
    background: var(--card-bg);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
    max-height: 90vh;
    display: flex;
    flex-direction: column;
  }
  
  /* 关闭按钮 */
  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 10;
    width: 44px;
    height: 44px;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    backdrop-filter: blur(4px);
  }
  
  .modal-close:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
  }
  
  /* 图片和内容合并区域 */
  .modal-image-content-wrapper {
    position: relative;
    width: 100%;
    height: 600px;
    overflow: hidden;
    flex-shrink: 0;
  }
  
  /* 背景图片 - 全屏铺满 */
  .modal-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }
  
  /* 渐变遮罩 - 从上半部分透明到下半部分半透明黑色 */
  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom,
      transparent 0%,
      transparent 40%,
      rgba(0, 0, 0, 0.5) 70%,
      rgba(0, 0, 0, 0.85) 100%
    );
    pointer-events: none;
  }
  
  /* 文字内容叠加层 - 定位在下半部分 */
  .modal-text-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 2rem 2rem 4rem 2rem;
    color: white;
    z-index: 1;
  }
  
  .modal-title {
    font-size: 1.75rem;
    font-weight: bold;
    color: white;
    margin-bottom: 1rem;
    line-height: 1.3;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }
  
  .modal-description {
    font-size: 0.95rem;
    line-height: 1.7;
    color: rgba(255, 255, 255, 0.95);
    white-space: pre-wrap;
    text-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);
    max-height: 200px;
    overflow-y: auto;
    padding-right: 1rem;
  }
  
  /* 自定义滚动条 */
  .modal-description::-webkit-scrollbar {
    width: 4px;
  }
  
  .modal-description::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
  }
  
  .modal-description::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 2px;
  }
  
  .modal-description::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }
  
  /* Visit Link 按钮 - 左下角，缩小尺寸 */
  .modal-link-btn {
    position: absolute !important;
    bottom: 1.25rem;
    left: 1.25rem;
    display: inline-flex !important;
    align-items: center;
    justify-content: center;
    gap: 0.35rem;
    padding: 0.5rem 1rem !important;
    background: oklch(0.65 0.15 var(--hue)) !important;
    color: white !important;
    font-weight: 600;
    font-size: 0.75rem;
    border-radius: 6px !important;
    text-decoration: none !important;
    border: none !important;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.4);
    z-index: 2;
  }
  
  .modal-link-btn.hidden {
    display: none !important;
  }
  
  .modal-link-btn::before {
    display: none !important;
  }
  
  .modal-link-btn:hover {
    background: oklch(0.70 0.16 var(--hue)) !important;
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
  }
  
  .modal-link-btn:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
  }
  
  .modal-link-btn svg {
    flex-shrink: 0;
  }
  
  /* 动画 */
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  /* 移动端优化 */
  @media (max-width: 768px) {
    .modal-wrapper {
      max-width: calc(100% - 2rem);
      margin: 0 1rem;
    }
    
    .modal-content {
      max-height: 90vh;
    }
    
    .modal-image-content-wrapper {
      height: 500px;
    }
    
    .modal-text-overlay {
      padding: 1.5rem 1.5rem 3.5rem 1.5rem;
    }
    
    .modal-title {
      font-size: 1.5rem;
    }
    
    .modal-description {
      font-size: 0.9rem;
      max-height: 150px;
    }
    
    .modal-close {
      width: 40px;
      height: 40px;
      top: 0.75rem;
      right: 0.75rem;
    }
    
    .modal-link-btn {
      bottom: 1rem;
      left: 1rem;
      padding: 0.45rem 0.85rem !important;
      font-size: 0.7rem;
      gap: 0.3rem;
    }
    
    .modal-link-btn svg {
      width: 10px;
      height: 10px;
    }
  }
</style>

<script define:vars={{ items }}>
  // 状态管理
  const state = {
    modal: null,
    elements: {}
  };

  // 获取 DOM 元素（懒加载）
  function getElements() {
    if (!state.modal) {
      state.modal = document.getElementById('showcase-modal');
      state.elements = {
        image: document.getElementById('modal-image'),
        title: document.getElementById('modal-title'),
        description: document.getElementById('modal-description'),
        link: document.getElementById('modal-link'),
        closeBtn: document.getElementById('modal-close'),
        backdrop: document.getElementById('modal-backdrop')
      };
    }
    return { modal: state.modal, ...state.elements };
  }

  // 更新模态窗口内容
  function updateModalContent(item) {
    const { image, title, description, link } = getElements();
    
    image.src = item.image;
    image.alt = item.title;
    title.textContent = item.title;
    description.textContent = item.details || item.description;
    
    // 更新链接按钮显示
    if (item.link) {
      link.href = item.link;
      link.classList.remove('hidden');
    } else {
      link.classList.add('hidden');
    }
  }

  // 打开模态窗口
  function openModal(index) {
    const item = items[index];
    const { modal } = getElements();
    
    if (!modal) return;
    
    // 确保模态窗口在 body 下
    if (modal.parentElement !== document.body) {
      document.body.appendChild(modal);
    }
    
    updateModalContent(item);
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  // 关闭模态窗口
  function closeModal() {
    const { modal } = getElements();
    if (modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  }

  // 绑定事件
  function bindEvents() {
    // 图片点击事件
    document.querySelectorAll('.showcase-image-wrapper').forEach((wrapper) => {
      const index = parseInt(wrapper.dataset.showcaseIndex, 10);
      wrapper.onclick = () => openModal(index);
    });
    
    // 关闭按钮
    const { closeBtn, backdrop } = getElements();
    if (closeBtn) closeBtn.onclick = (e) => { e.stopPropagation(); closeModal(); };
    if (backdrop) backdrop.onclick = closeModal;
    
    // ESC 键关闭
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && state.modal && !state.modal.classList.contains('hidden')) {
        closeModal();
      }
    });
  }

  // 初始化
  function init() {
    getElements();
    bindEvents();
  }

  // 页面加载
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  // Astro View Transitions 支持
  document.addEventListener('astro:page-load', init);
</script>

